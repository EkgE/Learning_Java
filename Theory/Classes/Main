public class Main {
    public static void main(String[] args) {
        PersonAsExample firstPerson = new PersonAsExample();
        PersonAsExample secondPerson = new PersonAsExample();

        //writing object with dot like firstExample. is giving a lot of methods or variables, that are added automatically
        //they're inherited from java base class

//        firstExample.numberField; // error, numberField is private, so we can call it
        firstPerson.age = 25; // not an error, because publicInt have public access modified
        //but we shouldn't call fields as public and initialize them in main, because it's breaking encapsulation rule
        // if we want to initialize variable or change it, we should use specific method for it

        firstPerson.setWeight(90); // with method called setNumberField we initialize private field numberField to 30
        //calling now object firstExample.numberField will give us 30;

//        System.out.println(firstExample.numberField); // doesn't work, because despite it's initialized we can't call it so easly
//        System.out.println("firstPerson weight is " + firstPerson.getWeight()); //  firstPerson weight is 90
        // by using get we can return wanted field

//       System.out.println(firstPerson.getName()); //null // it doesn't give null, because we have constructor without parameters
        //if there wouldn't be constructor it would print null
        //stringField was ot initialized by set so default value of it is null

        //------Constructors

        PersonAsExample thirdPerson = new PersonAsExample(); //default
//        System.out.println(thirdPerson.getAge() + " " + thirdPerson.getWeight() + " "+  thirdPerson.getName()); //24 80 Default

        PersonAsExample fourthPerson = new PersonAsExample(40, 60, "Aneta");
//        System.out.println(fourthPerson.getAge() + " " + fourthPerson.getWeight() + " "+  fourthPerson.getName()); //40 60 Aneta

//----- REFFERENCE
        Reference BlueThing = new Reference("");
        //Blue thing is a reference to instance of Refference class

        BlueThing.setColor("Blue");
//               System.out.println(BlueThing.getColor());  //Blue

        Reference RedThing = BlueThing;
        // now RedThing is also a reference to same instance as BlueThing

        RedThing.setColor("Red");
        // we change field in instance that RedThing and BlueThing refer to
                System.out.println(BlueThing.getColor());  //Red
                System.out.println(RedThing.getColor());  //Red
        // both of them are changed
    }
}
