public class Main {
    public static void main(String[] args) {
        for(int i = 1; i < 11; i++) {
            Container containerExample = RandomContainer();
            System.out.println(" Type is " + containerExample.getType() +
                                    "\n " + containerExample.Contain() +
                                       "\n");
        }
    }

    //the thing is, when random generator draw a class, that have method Contain, that method was called from child class level
    // but when child class, doesn't have that method, Container.contain was called
    //  Type is Empty box, Is something here? Subclass EmptyBox doesn't have it so container called his contain class with result "Is something here?"
    // this feature allows, prevent from running errors, instead program will suit to situation and will use parent attribute
    public static Container RandomContainer(){
        int randomNumber = (int) (Math.random() * 5) + 1;
        switch (randomNumber){
            case 1:
                return new WineGlass();   //Break doesn't need because return is used, so code won't execute later;
            case 2:
                return new GlassBottle();
            case 3:
                return new Cup();
            case 4:
                return new EmptyBox();
            case 5:
                return new WatterBottle();
        }
        return null;
    }
}
// child class can be returned, while parent class is called
// its inheritance aspect
//      in method above, classes Container should be returned, however child's of his are returned, because they're containers too
//
class Container{
    String type;
    public Container(String type){
        this.type = type;
    }
    public String Contain(){
        return "Is something here?";
    }

    public String getType() {
        return this.type;
    }
}

class WineGlass extends Container{
    public WineGlass() {
        super("Glass");
    }
    public String Contain(){
        return "It contains wine";
    }
}

class Cup extends Container{
    public Cup(){
        super("Plastic cup");
    }
    public String Contain(){
        return "It contains juice";
    }
}

class WatterBottle extends Container{
    public WatterBottle(){
        super("Plastic bottle");
    }
    public String Contain(){
        return "It contains water";
    }
}
class GlassBottle extends Container{
    public GlassBottle() {
        super("Glass bottle");
    }

    @Override
    public String Contain() {
        return "It contains beer";
    }
}

class EmptyBox extends Container {
    public EmptyBox() {
        super("Empty box");
    }
}
