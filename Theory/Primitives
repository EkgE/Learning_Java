public class IntegarsBiteShortLong {
    
        public static final String CONSTANT_VARIABLE = "constant var"; //  syntax for constant 
        // constant variable are declared by final 
        // they're written by uppercase snake syntax
        // they can't be changed through coding
        
    public static void main(String[] args){
        int numberIntegarMax = Integer.MAX_VALUE; // 2147483647
        int numberIntegarMin = Integer.MIN_VALUE; //-2147483648
        // Integer = wrapper class, used to perform operation on integers
        // integer occupies 32 bits = width 32 (2^31

        System.out.println(numberIntegarMax + 1); //-2147483648 // OVERFLOW
        System.out.println(numberIntegarMin - 1); // 2147483647 // UNDERFLOW
        // works aswell with short and byte

//        int numberInvalid = 2147483648; //Integer number too large

        int numberUnderscore = 2_147_483_647; //another syntax for int


        byte numberByteMax = Byte.MAX_VALUE; //127
        byte numberByteMin = Byte.MIN_VALUE; //-128
        // byte == wrapper class used to call variable byte
        // byte occupies 8 bits = width 8 (2^7

        short numberShortMax = Short.MAX_VALUE; //32767
        short numberShortMin = Short.MIN_VALUE; //-32768
        // short = wrapper class used to call variable short
        // short occupies 16 bits = width 16 (2^15

        long numberLong = 50L; // syntax of long, can be used with lowercase l, but it looks similar to 1, so use L
        // if we use long without l  > 2147483647, it will give error //Integer number too large
        long numberLongMax = Long.MAX_VALUE; // 9223372036854775807
        long numberLongMin = Long.MIN_VALUE; // -9223372036854775808
        // long = wrapper class used to call variable long
        // long occupies 64 bits = width 64 (2^63

        // number of width of specific type of number is important to save data
        // byte is using least amount of data, while long used the most

        int newIntNumberFromInt = (numberIntegarMax / 2); //1073741823, works fine 
//        short newShortNumberFromShort = (numberShortMax / 2); // error, required short, provided int
//        byte newByteNumberFromByte = (numberByteMax / 2); //error, required byte, provided int
        short newShortNumberFromShort =  (short) (numberShortMax / 2);
        byte newByteNumberFromByte = (byte) (numberByteMax / 2);
        //now works fine
        // (Data type)Casting is changing data types to another
        // Default number data type is integer
        // while declaring variable we provided another data type, different from integer
        // that's why error occurred and we had to cast
        
        
                byte challenge1NumberByte = 126;
        short challenge1NumberShort = 32766;
        int challenge1NumberInt = 2147483646;
        long challenge1NumberLong = 50000L + 10L * ((long)challenge1NumberInt + challenge1NumberByte + challenge1NumberShort); //21475215380
//  System.out.println(challenge1NumberLong);

        float maxFloatNumber = Float.MAX_VALUE; //3.4028235E38
        float minFloatNumber = Float.MIN_VALUE; // 1.4E-45
//        System.out.println(maxFloatNumber);
//        System.out.println(minFloatNumber);
        // Float is single precision floating number
        // float width is 32 bits
        // it's not default, if we want to use it we hate co cast (float) or use f on the end
        
        double maxDoubleNumber = Double.MAX_VALUE; //1.7976931348623157E308
        double minDoubleNumber = Double.MIN_VALUE; //4.9E-324
//        System.out.println(maxDoubleNumber);
//        System.out.println(minDoubleNumber);
        // Double is double precision floating number
        // double width is 64 bits
        // its more precision than float, so its better to use it
        // double is faster and math function works on it
        // its default decimal number, but we can end it with d on the end


        float firstFloatNumber = 10.00f;
        double firstDoubleNumber = 10.00d;
        int intNumberFloat = 10;
//        System.out.println(firstFloatNumber / 3); //3.3333333
        // tbh don't use float never
//        System.out.println(firstDoubleNumber / 3); //3.3333333333333335
        //best precision
//        System.out.println(intNumberFloat / 3); //3
        // cutting every number after decimal point

        float dividedFloat = 10f / 4; //2.5
//        System.out.println(dividedFloat);

        float twoPlusThreeFloat = 0.1f + 0.2f; // 0.3
//        System.out.println(twoPlusThreeFloat);
        double twoPlusThreeDouble = 0.1d + 0.3d; // 0.4
//        System.out.println(twoPlusThreeDouble);

    // Challenge pounds to kilograms variable
        double poundsVar = 254;
        double poundsToKilograms = poundsVar * 0.45359237d;
        System.out.println(poundsToKilograms);
        }
        
        
