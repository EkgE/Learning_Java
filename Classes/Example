public class Example { // classes syntax // we declare class with upper first letter
    //class can be described as user customized data

    //public is access modified
    //public means unrestricted access to the class

// class is a template for objects in java OOP
// objects consist of state and behaviors
// state are stored in fields like variables
// behaviors are stored in methods

    public int publicInt;
    private int numberField;
    private String stringField; //always declaring fields as private
    //declaration variable in class
    //class variable are called member variables or fields
    //class variables are state of class
    //declaration of fields require access modifier like classes
    // rule in java says that declared field should have private access modifier
    //private allows to encapsulate
    //encapsulation is covering, that representation of object would be hidden from outside object definition
    // so only internals can access to class

//created methods in a class are bounded to all objects created from class
    public void setNumberField(int numberField){
        //public because we want to it to be available everywhere
        //void, because it doesn't return anything, we want to overwrite variable in a target object
        //always start those methods as set
        //parameter should have the same primitive type as variable we want to initialize
        this.numberField = numberField;
                //it's very important to add this
                // this allows us to initialize numberField declared as member variables
                // without it, system would read it as updating parameter called the same
    }

    public String getStringField(){
        return this.stringField;
    }
    public int getNumberField(){
        return this.numberField;
    }// method started with get are used to call fields from objects

    private int positiveNumber;
    public void setPositiveNumber(int positiveNumber){
        if(positiveNumber > 0) this.positiveNumber = positiveNumber;
        else this.positiveNumber = -1;
    }
    //setter's are important because by method we can personalize our fields by validation
    // example above allows us to set only positive numbers in field positiveNumber in object made from Example class
}

