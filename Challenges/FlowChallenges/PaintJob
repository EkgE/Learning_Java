public class PaintJob {
    public static final int INVALID_VALUE = -1; // constant as invalid value
    public static void main(String[] args){
    }
    //overflow method that use extraBuckets
   public static int getBucketCount(double width, double height, double areaPerBucket, int extraBuckets ){
      if(width <= 0 || height <= 0 || areaPerBucket <= 0 || extraBuckets < 0) return INVALID_VALUE; //validation
       return getBucketCount(width, height, areaPerBucket ) - extraBuckets; // using overflow method as base for number of buckets
   }
    //overflow method without extraBuckets
    public static int getBucketCount (double width, double height, double areaPerBucket){
        if(width <= 0 || height <= 0 || areaPerBucket <= 0) return INVALID_VALUE; //validation
        return (int) Math.ceil((width * height) / areaPerBucket);
    }
    //overflow method with only area
    public static int getBucketCount(double area, double areaPerBucket){
        if(area <= 0 || areaPerBucket <= 0) return INVALID_VALUE; //validation
        return (int) Math.ceil( (area)/areaPerBucket );
    }


    /// BETTER WRITTEN
    public static int getBucketCountSecond(double width, double height, double areaPerBucket, int extraBuckets ){
        if(width <= 0 || height <= 0 || areaPerBucket <= 0 || extraBuckets < 0) return INVALID_VALUE; //validation
        return (int) Math.ceil((width * height) / areaPerBucket) - extraBuckets;
    }
    //overflow method without extraBuckets
    public static int getBucketCountSecond (double width, double height, double areaPerBucket){
        return getBucketCountSecond(width, height, areaPerBucket, 0); // using overflow method as base for number of buckets
    }
    //overflow method with only area
    public static int getBucketCountSecond(double area, double areaPerBucket){
        return getBucketCountSecond(area, 1, areaPerBucket, 0); // using overflow method as base for number of buckets
    }// this one takes area as width and height as 1
}
